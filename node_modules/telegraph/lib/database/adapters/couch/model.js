module.exports = function(server) {

  var db = server.db;

  // The CouchDB Flavored Model
  //
  // name: The name of the resource to be used
  // design: A common datamodel
  // -------------------------------------------------- //
  
  server.Model = function CouchBlueprint (name, design) {
    
    var self = CouchBlueprint;

    self.name   = name;
    self.design = design;

    db.save("_design/" + name, design);


    // -------------------------------------------------- //
    // SHORTCUT METHODS
    // -------------------------------------------------- //
    
    
    // For easier callbacks
    // -------------------------------------------------- //
    self.then = function(next) {
      next.apply(self, []);
    };

    // A shortcut for design documents views
    // -------------------------------------------------- //
    
    self.view = function(view, callback) {

      callback = callback || function(err, doc) {
        return self;
      };
      
      db.view(name + "/" + view, callback);

    };


    // A simpler method of creating items
    // -------------------------------------------------- //
    
    self.save = function(id, data, callback) {

      // Polymorphism;
      if (typeof id !== "string") {
        callback = data;
        data = id;
        id = name + "-" + Date.now();
      }

      callback = callback || function(err, doc) {
        return self;
      };

      // Since we're dealing with design documents through self
      // method, let's default the type to the name of the design
      data.type = data.type || name;

      db.save(id, data, function(err, doc) {
        if (err) { return server.error(err.reason); } 
        return callback.apply(db, [err, doc]);
      });

    };


    // A simpler update manager
    // -------------------------------------------------- //
    
    self.update = function(id, data, callback) {

      callback = callback || function(err, doc) {
        return self;
      };

      db.merge(id, data, function(err, doc) {
        if (err) return server.error(err.reason);
        return callback.apply(db, arguments);
      });

    };

    
    // A simpler method of removing records
    // -------------------------------------------------- //

    self.remove = function(id, callback) {

      callback = callback ||  function(err, doc) {
        return self;
      };

      db.get(id, function(err, doc) {

        if (err) return server.error(err.reason);
        
        db.remove(doc._id, function(err, doc) {

          if (err) return server.error(err.reason);

          server.info("deleted record " + doc._id);

          callback.apply(db, arguments);

        });

      });
      
      return server;

    };

    
    // -------------------------------------------------- //
    // WEBSOCKET METHODS
    // -------------------------------------------------- //
    
    if (server.websockets) {

      self.send = function(id, message) {

        db.get(id, function(err, doc) {
          if (err) { return server.error(err.error + ": " + err.reason); }
          server.send(message, doc);
        });

      };

    }
    

    // -------------------------------------------------- //
    // End of Telegraph.Model
    // -------------------------------------------------- //

    return self;
    
  };
  
};
